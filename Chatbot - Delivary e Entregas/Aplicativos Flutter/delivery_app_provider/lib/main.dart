import 'package:delivery_app_provider/src/widgets/customAppBar.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

//!=============================================================
// ESSE CODIGO ABAIXO ENSIMA COMO FAZER UM MENU LATERAL PARA NAVEGA√á√ÉO ENTRE PAGINAS
//!=============================================================

class NavigationState with ChangeNotifier {
  int _currentIndex = 0;

  int get currentIndex => _currentIndex;

  set currentIndex(int index) {
    _currentIndex = index;
    notifyListeners();
  }
}

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (context) => NavigationState(),
      child: MaterialApp(
        title: 'Flutter Demo',
        theme: ThemeData(
          primarySwatch: Colors.blue,
        ),
        home: MyHomePage(),
      ),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      //!Customizando a APP BAR
      appBar: AppBar(
        title: const Text('üê∫ Navega√ß√£o com o Providerüê∫'),
        backgroundColor: Colors.black,
        elevation: 50.0,

        //!COdigo que preciso entender melhor
        // leading: Builder(
        //   builder: (BuildContext context) {
        //     return IconButton(
        //       icon: const Icon(Icons.menu),
        //       onPressed: () => Scaffold.of(context).openDrawer(),
        //     );
        //   },
        // ),
      ),

      //!Meu Menu Lateral
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: <Widget>[
            DrawerHeader(
              decoration: BoxDecoration(
                color: Colors.blue,
              ),
              child: Text(
                'Flutter Navigation Example',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 24,
                ),
              ),
            ),
            ListTile(
              title: Text('Card 1'),
              onTap: () {
                Provider.of<NavigationState>(context, listen: false)
                    .currentIndex = 0;
                Navigator.pop(context);
              },
            ),
            ListTile(
              title: Text('Card 2'),
              onTap: () {
                Provider.of<NavigationState>(context, listen: false)
                    .currentIndex = 1;
                Navigator.pop(context);
              },
            ),
            ListTile(
              title: Text('Card 3'),
              onTap: () {
                Provider.of<NavigationState>(context, listen: false)
                    .currentIndex = 2;
                Navigator.pop(context);
              },
            ),
            ListTile(
              title: Text('Card 4'),
              onTap: () {
                Provider.of<NavigationState>(context, listen: false)
                    .currentIndex = 3;
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
      body: _getCard(
        context,
        Provider.of<NavigationState>(context).currentIndex,
      ),
    );
  }
}

Widget _getCard(BuildContext context, int index) {
  switch (index) {
    case 0:
      return Container(
        color: Colors.red,
        child: Center(
          child: Text(
            'O Provider √© um pacote de c√≥digo aberto que ajuda a gerenciar o estado de sua aplica√ß√£o no Flutter. Ele fornece um mecanismo para acessar e atualizar informa√ß√µes compartilhadas por toda a aplica√ß√£o, como informa√ß√µes de usu√°rio e informa√ß√µes de produto. \n\nPara usar o Provider, voc√™ precisa criar uma classe de "provedor de estado" que herda da classe "ChangeNotifier" e cont√©m os dados e as a√ß√µes que voc√™ deseja compartilhar com a aplica√ß√£o.',
            style: TextStyle(color: Colors.white),
          ),
        ),
      );
      break;
    case 1:
      return Container(
        color: Colors.green,
        child: Center(
          child: Text(
            'Em seguida, voc√™ pode adicionar esse provedor de estado √† √°rvore de widget de sua aplica√ß√£o usando o m√©todo "ChangeNotifierProvider". Quando voc√™ faz isso, o provedor de estado fica dispon√≠vel para todos os widgets filhos na √°rvore de widget, e eles podem acess√°-lo usando o m√©todo "Provider.of".',
            style: TextStyle(color: Colors.white),
          ),
        ),
      );
      break;
    case 2:
      return Container(
        color: Colors.yellow,
        child: Center(
          child: Text(
            'Da mesma forma, voc√™ pode criar um provedor de informa√ß√µes de produto, chamado "ProductProvider", para armazenar informa√ß√µes sobre seus produtos, como nome, descri√ß√£o, pre√ßo, etc.\n\nCom o Provider, voc√™ pode garantir que as informa√ß√µes compartilhadas em sua aplica√ß√£o sejam atualizadas de maneira consistente e que todos os widgets tenham acesso √†s informa√ß√µes mais atualizadas.',
            style: TextStyle(color: Colors.black),
          ),
        ),
      );
      break;
    case 3:
      return Container(
        color: Colors.blue,
        child: Center(
          child: Text(
            'Provider: √â uma biblioteca simples e f√°cil de usar que fornece gerenciamento de estado e inje√ß√£o de depend√™ncias. √â uma op√ß√£o popular para aplicativos pequenos e de baixa complexidade. Vantagens: simples, f√°cil de usar, suporta a inje√ß√£o de depend√™ncias. Desvantagens: pode se tornar complexo em aplicativos maiores ou mais complexos.\n\nBLoC (Business Logic Component): √â uma arquitetura baseada em streams que permite separar o estado e a l√≥gica de neg√≥cios da apresenta√ß√£o. √â uma boa op√ß√£o para aplicativos maiores ou mais complexos que exigem escalabilidade. Vantagens: escal√°vel, f√°cil de testar, separa√ß√£o clara de preocupa√ß√µes. Desvantagens: pode ser um pouco mais complexo que o Provider.\n\nMobX: √â uma biblioteca de gerenciamento de estado baseada em observ√°veis. √â uma boa op√ß√£o para aplicativos mais complexos que exigem performance elevada. Vantagens: performance, facilidade de uso, facilidade de debug. Desvantagens: n√£o √© nativo do Flutter, pode ser dif√≠cil de compreender para novos desenvolvedores.',
            style: TextStyle(color: Colors.black),
          ),
        ),
      );
      break;
    default:
      return Container();
  }
}
